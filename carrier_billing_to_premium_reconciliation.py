# -*- coding: utf-8 -*-
"""Carrier Billing to Premium Reconciliation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZQAEnHw4Z4IUBQmSEWmIckqjoKx17XBj
"""

# Install dependencies
!pip install -q pandas openpyxl

import pandas as pd
import re
import datetime
from google.colab import files

print("Please upload your .txt file")
uploaded = files.upload()

input_filename = list(uploaded.keys())[0]

# Date Range Naming Logic
today = datetime.date.today()
current_month_name = today.strftime("%b")
last_month = today.replace(day=1) - datetime.timedelta(days=1)
last_month_name = last_month.strftime("%b")

year = today.year
output_filename = f"Carrier Billing to Premium Recon ({last_month_name}.9.{year}-{current_month_name}.8.{year}).xlsx"

# Parsing Logic
def parse_transactions(file_path, output_path):
    records = []

    with open(file_path, 'r') as f:
        lines = [line.strip() for line in f if line.strip()]

    for line_num, line in enumerate(lines, 1):
        try:
            raw_record = line
            seq_num = line[0:4].strip()
            policy_num = line[6:15].strip()
            data_source = line[15:18].strip()

            # RCPT_REF_NO = after CompanyName to whitespace
            rcpt_ref_no = None
            company_match = re.search(r'company_name\s*', line)
            if company_match:
                start = company_match.end()
                after_company_name = line[start:]
                parts = re.split(r'\s{5,}', after_company_name)
                rcpt_candidate = parts[0].strip() if parts else ""
                rcpt_ref_no = rcpt_candidate if rcpt_candidate else None

            # Amount block after RCPT_REF_NO
            amount_data = ""
            if rcpt_ref_no and company_match:
                start_after_company_name = line.find(rcpt_ref_no, company_match.end())
                if start_after_company_name != -1:
                    amount_data = line[start_after_company_name + len(rcpt_ref_no):].strip()

            gross_amount = None
            net_prem_amount = None
            returned_indicator = ""
            transaction_type = "UNKNOWN"

            if len(amount_data) >= 14:
                gross_raw = amount_data[0:7]
                net_raw = amount_data[7:14]
                gross_amount = float(gross_raw) / 100 if gross_raw.isdigit() else None
                net_prem_amount = float(net_raw) / 100 if net_raw.isdigit() else None

                if len(amount_data) > 14 and not amount_data[14].isdigit():
                    returned_indicator = amount_data[14]

            if rcpt_ref_no:
                if re.fullmatch(r'[A-Fa-f0-9]{32}', rcpt_ref_no):
                    transaction_type = "REFUND" if returned_indicator == "R" else "CHARGEBACK" if returned_indicator == "C" else "UNKNOWN_HEX"
                elif rcpt_ref_no.isdigit():
                    transaction_type = "NORMAL"

            records.append({
                "RAW_RECORD": raw_record,
                "SEQ-NUM": seq_num,
                "POLICY-NUM": policy_num,
                "DATA-SOURCE": data_source,
                "RCPT_REF_NO": rcpt_ref_no,
                "TRANSACTION_TYPE": transaction_type,
                "GROSS-AMOUNT": gross_amount,
                "NET PREM AMOUNT": net_prem_amount,
                "RETURNED INDICATOR": returned_indicator
            })

        except Exception as e:
            print(f"Error parsing line {line_num}: {e}")
            records.append({
                "RAW_RECORD": line,
                "SEQ-NUM": None,
                "POLICY-NUM": None,
                "DATA-SOURCE": None,
                "RCPT_REF_NO": None,
                "TRANSACTION_TYPE": "ERROR",
                "GROSS-AMOUNT": None,
                "NET PREM AMOUNT": None,
                "RETURNED INDICATOR": None
            })

    df = pd.DataFrame(records)

    # Save to Excel with renamed sheet
    with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Premium File')

    print(f"Parsing complete. Output saved to: {output_path}")
    files.download(output_path)

# Run the parser
parse_transactions(input_filename, output_filename)

